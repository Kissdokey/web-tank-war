day01
一开始从构思要做什么，能做什么开始，想了很多各种各样以后可能会拓展的玩法或者功能，我觉得这一步是有必要的，因为首先可以激起自己开始这个项目的意愿，
能够让自己有一个整体把控自己的这个项目的价值，而且这第一步会帮助自己在进行项目设计之初心里有个底，如果这一步做的不好的话，后面进行某个对象的设计、继承关系等都是非常困难或者容易写出来的代码不具有太好的扩展性

day02
一开始想的有多宏大，实际开始搓代码就有多难搞，有了第一天的思考，自己是大概知道会有什么基本对象，这些对象以后可能会拓展哪些属性等等，但是面对这个大工程，第一步怎么下手反而有点不知所措，下面把一些思路写下来
- 首先是搭建项目，这个直接用vite搭建即可，vue3+ts+vite。一开始没想着用框架的，因为毕竟一开始设计对象也用不上响应式，但是后来想了一想，最后的成品还是需要借助于框架的，所以干脆就直接来吧
- 从哪里开始第一步？一开始就是按照项目来划分模块目录，一连创建了好几个目录用来存放可能存在的模块
- 从哪个模块开始？这个我是这么思考的，我的第一个小目标是实现键盘操控坦克移动和旋转，所以键盘监听事件或者说事件模块和坦克对象的设计是必须的，所以就从这两个开始了
- 如何设计
   -  这个一开始我想的是，肯定有一个控制器来负责管理坦克、各种交互事件、各种地图信息、各种碰撞检测逻辑，所以抽出来一个contorller层
   -   然后是坦克对象，包含了它基本的属性，存在争议的一点是坦克的位置信息是由坦克自己管理还是由控制器进行管理。这个也是比较纠结的，
    一开始，我是觉得位置信息，应该和坦克对象是分割的，就好比生活中的一辆车，不会关注自己在哪里，有自己的最大速度加速度、剩余油量等等，至于自己每时每刻在哪里可以说是由外界其他因素决定的，如果汽车前面有一堵墙，那么它向前将不会动，其他因素决定意味着这个位置信息不是自己完全决定的
    但是后面想了一想，既然可以把位置信息单独拿出来管理，为什么不让汽车自己进行管理就行了呢？如果需要碰撞检测之类的，交给控制器来统筹自己的位置信息和其他障碍物信息就行了。这个还有一个好处是在vue的响应式设计中不需要这么麻烦地再搞一个map来存储坦克位置信息
   -  然后是玩家和各个键位和事件的关系如何穿起来。首先如果是玩家操控的坦克，一定是一个坦克对应一个玩家，这有个关联关系。其次，上下左右这些键位与玩家绑定还是坦克绑定，从实际意义来讲，玩家操控键盘，再去控制自己的坦克，所以键位应该与玩家绑定；从代码逻辑上来说，坦克与键盘绑定本身是不太合理的，加入后期加入人机坦克，这些坦克没有属于的玩家也没有对应的键盘，所以这个主从关系不要搞反了
   - 平滑动画的实现是通过requestAnimationFrame递归调用，keydown开始执行动画，keyup则结束动画，这里对各种类型的keyboard事件进行了区分和参数传递判断
- 今天完成了一个简易的，两个坦克可以单独前后移动和旋转。下一步是完善一下代码，把代码结构重新调整一下，优化一下代码，能抽离复用的逻辑抽离一下，还有类型定义，尤其是坦克的，再仔细想一下
- 接下来目标是增加地图加载